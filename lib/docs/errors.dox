/*! \defgroup Errors Fehlerbehandlung
 * PPL verwaltet Fehler in internen Datenstrukturen, auf die mit einer Reihe von Befehlen zugegriffen
 * werden kann. Es ist sichergestellt, dass in einer Umgebung mit mehreren Threads jeder Thread seinen
 * eigenen Fehlercode verwaltet, ohne dass sich der Anwender darum kümmern muss.
 * 
 * \section ErrorFunktionen Funktionen
 * \subsection ErrorSet Fehler setzen
 * Mit folgenden Befehlen kann ein Fehler gesetzt werden:
 * \li ppl6::SetError(ppluint32 errorcode)
 * \li ppl6::SetError(ppluint32 errorcode, char *msg, ...)
 * \li ppl6::SetError(ppluint32 errorcode, char *msg)
 * \li ppl6::SetError(ppluint32 errorcode, ppluint32 suberrorcode, char *msg, ...)
 * \li ppl6::SetError(ppluint32 errorcode, ppluint32 suberrorcode, char *msg)
 * \li ppl6::SetErrorFromErrno(char *msg=NULL, ...)
 * 
 * \subsection ErrorAuslesen Fehler auslesen
 * \li ppl6::GetError
 * \li ppl6::GetExtendedError
 * \li ppl6::GetErrorCode
 * \li ppl6::GetSubError
 * \li ppl6::PrintError
 * \li ppl6::DisplayError
 * \li ppl6::Error2String
 *
 * \subsection ErrorStack Fehler im Stack sichern
 * In manchen Fällen ist es notwendig einen zuvor aufgetretenen Fehler zwischenzuspeichern und
 * später wieder herzustellen. Dazu gibt es folgende Funktionen:
 * 
 * \li ppl6::PopError
 * \li ppl6::PushError
 * 
 * \subsection ErrorStore Fehler in einer Datenstruktur speichern
 * 
 * \li ppl6::StoreError
 * \li ppl6::RestoreError
 * \li ppl6::ClearError
 *
 * \subsection ErrorTranslate Fehler des Betriebssystems in einen PPL-Fehler umwandeln
 * Werden Systemfunktionen direkt aufgerufen, die im Fehlerfall die errno-Variable setzen,
 * kann diese mit der Funktion ppl6::TranslateErrno(int e) dieser Wert in einen PPL-Fehlercode
 * umgewandelt werden.
 * \see ppl6::TranslateErrno(int e)
 * \see ppl6::SetErrorFromErrno(char *msg=NULL, ...)
 *  
 * \subsection ErrorExtend Eigene Fehlercodes hinzufügen
 * PPL beansprucht die Fehlercodes 0-9999 für sich selbst. Alle Fehlercodes darüber stehen der
 * Anwendung zur Verfügung. Damit die Fehlerfunktionen auch für Fehlercodes > 9999 die entsprechenden
 * Fehlertexte ausgeben können, müssen entsprechende Routinen in das System eingeklinkt werden.
 * Diese geschicht mittels der folgenden Funktion:
 *  
 * \li ppl6::AttachErrorHandler
 * 
 * 
 */
 
  

 
 